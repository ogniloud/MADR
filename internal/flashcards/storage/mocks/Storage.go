// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ogniloud/madr/internal/flashcards/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AppendBacksides provides a mock function with given fields: ctx, userId, cardId, backsides
func (_m *Storage) AppendBacksides(ctx context.Context, userId int, cardId int, backsides []models.Backside) error {
	ret := _m.Called(ctx, userId, cardId, backsides)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []models.Backside) error); ok {
		r0 = rf(ctx, userId, cardId, backsides)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFlashcardFromDeck provides a mock function with given fields: ctx, cardId
func (_m *Storage) DeleteFlashcardFromDeck(ctx context.Context, cardId int) error {
	ret := _m.Called(ctx, cardId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, cardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLeitner provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteLeitner(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserDeck provides a mock function with given fields: ctx, userId, id
func (_m *Storage) DeleteUserDeck(ctx context.Context, userId int, id int) error {
	ret := _m.Called(ctx, userId, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDecksByUserId provides a mock function with given fields: ctx, id
func (_m *Storage) GetDecksByUserId(ctx context.Context, id int) (models.Decks, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Decks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Decks, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Decks); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Decks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlashcardById provides a mock function with given fields: ctx, id
func (_m *Storage) GetFlashcardById(ctx context.Context, id int) (models.Flashcard, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Flashcard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Flashcard, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Flashcard); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Flashcard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlashcardsIdByDeckId provides a mock function with given fields: ctx, id
func (_m *Storage) GetFlashcardsIdByDeckId(ctx context.Context, id int) ([]int, error) {
	ret := _m.Called(ctx, id)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeitnerByUserIdCardId provides a mock function with given fields: ctx, id, flashcardId
func (_m *Storage) GetLeitnerByUserIdCardId(ctx context.Context, id int, flashcardId int) (models.UserLeitner, error) {
	ret := _m.Called(ctx, id, flashcardId)

	var r0 models.UserLeitner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (models.UserLeitner, error)); ok {
		return rf(ctx, id, flashcardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) models.UserLeitner); ok {
		r0 = rf(ctx, id, flashcardId)
	} else {
		r0 = ret.Get(0).(models.UserLeitner)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, flashcardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomCardDeckN provides a mock function with given fields: ctx, userId, deckId, down, n
func (_m *Storage) GetRandomCardDeckN(ctx context.Context, userId int, deckId int, down models.CoolDown, n int) ([]int, error) {
	ret := _m.Called(ctx, userId, deckId, down, n)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, models.CoolDown, int) ([]int, error)); ok {
		return rf(ctx, userId, deckId, down, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, models.CoolDown, int) []int); ok {
		r0 = rf(ctx, userId, deckId, down, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, models.CoolDown, int) error); ok {
		r1 = rf(ctx, userId, deckId, down, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, uid
func (_m *Storage) GetUserInfo(ctx context.Context, uid int) (models.UserInfo, error) {
	ret := _m.Called(ctx, uid)

	var r0 models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.UserInfo, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.UserInfo); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(models.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAllFlashcards provides a mock function with given fields: ctx, id, cards
func (_m *Storage) PutAllFlashcards(ctx context.Context, id int, cards []models.Flashcard) ([]int, error) {
	ret := _m.Called(ctx, id, cards)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []models.Flashcard) ([]int, error)); ok {
		return rf(ctx, id, cards)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []models.Flashcard) []int); ok {
		r0 = rf(ctx, id, cards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []models.Flashcard) error); ok {
		r1 = rf(ctx, id, cards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAllUserLeitner provides a mock function with given fields: ctx, uls
func (_m *Storage) PutAllUserLeitner(ctx context.Context, uls []models.UserLeitner) ([]int, error) {
	ret := _m.Called(ctx, uls)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.UserLeitner) ([]int, error)); ok {
		return rf(ctx, uls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.UserLeitner) []int); ok {
		r0 = rf(ctx, uls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.UserLeitner) error); ok {
		r1 = rf(ctx, uls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutNewDeck provides a mock function with given fields: ctx, config
func (_m *Storage) PutNewDeck(ctx context.Context, config models.DeckConfig) (int, error) {
	ret := _m.Called(ctx, config)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DeckConfig) (int, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DeckConfig) int); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DeckConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeck provides a mock function with given fields: ctx, deck
func (_m *Storage) UpdateDeck(ctx context.Context, deck models.DeckConfig) error {
	ret := _m.Called(ctx, deck)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DeckConfig) error); ok {
		r0 = rf(ctx, deck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFlashcard provides a mock function with given fields: ctx, id, w, b, a
func (_m *Storage) UpdateFlashcard(ctx context.Context, id int, w string, b models.Backside, a string) error {
	ret := _m.Called(ctx, id, w, b, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, models.Backside, string) error); ok {
		r0 = rf(ctx, id, w, b, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLeitner provides a mock function with given fields: ctx, ul
func (_m *Storage) UpdateLeitner(ctx context.Context, ul models.UserLeitner) error {
	ret := _m.Called(ctx, ul)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserLeitner) error); ok {
		r0 = rf(ctx, ul)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
