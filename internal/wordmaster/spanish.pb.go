// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: spanish.proto

package wordmaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanishVerbInflections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infinitive     string                             `protobuf:"bytes,1,opt,name=infinitive,proto3" json:"infinitive,omitempty"`
	Gerund         string                             `protobuf:"bytes,2,opt,name=gerund,proto3" json:"gerund,omitempty"`
	PastParticiple string                             `protobuf:"bytes,3,opt,name=past_participle,json=pastParticiple,proto3" json:"past_participle,omitempty"`
	Indicative     *SpanishVerbIndicativeInflections  `protobuf:"bytes,4,opt,name=indicative,proto3" json:"indicative,omitempty"`
	Subjunctive    *SpanishVerbSubjunctiveInflections `protobuf:"bytes,5,opt,name=subjunctive,proto3" json:"subjunctive,omitempty"`
	Imperative     *SpanishVerbImperativeInflections  `protobuf:"bytes,6,opt,name=imperative,proto3" json:"imperative,omitempty"`
}

func (x *SpanishVerbInflections) Reset() {
	*x = SpanishVerbInflections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spanish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanishVerbInflections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanishVerbInflections) ProtoMessage() {}

func (x *SpanishVerbInflections) ProtoReflect() protoreflect.Message {
	mi := &file_spanish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanishVerbInflections.ProtoReflect.Descriptor instead.
func (*SpanishVerbInflections) Descriptor() ([]byte, []int) {
	return file_spanish_proto_rawDescGZIP(), []int{0}
}

func (x *SpanishVerbInflections) GetInfinitive() string {
	if x != nil {
		return x.Infinitive
	}
	return ""
}

func (x *SpanishVerbInflections) GetGerund() string {
	if x != nil {
		return x.Gerund
	}
	return ""
}

func (x *SpanishVerbInflections) GetPastParticiple() string {
	if x != nil {
		return x.PastParticiple
	}
	return ""
}

func (x *SpanishVerbInflections) GetIndicative() *SpanishVerbIndicativeInflections {
	if x != nil {
		return x.Indicative
	}
	return nil
}

func (x *SpanishVerbInflections) GetSubjunctive() *SpanishVerbSubjunctiveInflections {
	if x != nil {
		return x.Subjunctive
	}
	return nil
}

func (x *SpanishVerbInflections) GetImperative() *SpanishVerbImperativeInflections {
	if x != nil {
		return x.Imperative
	}
	return nil
}

type SpanishVerbIndicativeInflections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Present     *SpanishVerbPersonInflections `protobuf:"bytes,1,opt,name=present,proto3" json:"present,omitempty"`
	Imperfect   *SpanishVerbPersonInflections `protobuf:"bytes,2,opt,name=imperfect,proto3" json:"imperfect,omitempty"`
	Preterite   *SpanishVerbPersonInflections `protobuf:"bytes,3,opt,name=preterite,proto3" json:"preterite,omitempty"`
	Future      *SpanishVerbPersonInflections `protobuf:"bytes,4,opt,name=future,proto3" json:"future,omitempty"`
	Conditional *SpanishVerbPersonInflections `protobuf:"bytes,5,opt,name=conditional,proto3" json:"conditional,omitempty"`
}

func (x *SpanishVerbIndicativeInflections) Reset() {
	*x = SpanishVerbIndicativeInflections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spanish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanishVerbIndicativeInflections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanishVerbIndicativeInflections) ProtoMessage() {}

func (x *SpanishVerbIndicativeInflections) ProtoReflect() protoreflect.Message {
	mi := &file_spanish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanishVerbIndicativeInflections.ProtoReflect.Descriptor instead.
func (*SpanishVerbIndicativeInflections) Descriptor() ([]byte, []int) {
	return file_spanish_proto_rawDescGZIP(), []int{1}
}

func (x *SpanishVerbIndicativeInflections) GetPresent() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Present
	}
	return nil
}

func (x *SpanishVerbIndicativeInflections) GetImperfect() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Imperfect
	}
	return nil
}

func (x *SpanishVerbIndicativeInflections) GetPreterite() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Preterite
	}
	return nil
}

func (x *SpanishVerbIndicativeInflections) GetFuture() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Future
	}
	return nil
}

func (x *SpanishVerbIndicativeInflections) GetConditional() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Conditional
	}
	return nil
}

type SpanishVerbSubjunctiveInflections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Present     *SpanishVerbPersonInflections `protobuf:"bytes,1,opt,name=present,proto3" json:"present,omitempty"`
	ImperfectRa *SpanishVerbPersonInflections `protobuf:"bytes,2,opt,name=imperfect_ra,json=imperfectRa,proto3" json:"imperfect_ra,omitempty"`
	ImperfectSe *SpanishVerbPersonInflections `protobuf:"bytes,3,opt,name=imperfect_se,json=imperfectSe,proto3" json:"imperfect_se,omitempty"`
	Future      *SpanishVerbPersonInflections `protobuf:"bytes,4,opt,name=future,proto3" json:"future,omitempty"`
}

func (x *SpanishVerbSubjunctiveInflections) Reset() {
	*x = SpanishVerbSubjunctiveInflections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spanish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanishVerbSubjunctiveInflections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanishVerbSubjunctiveInflections) ProtoMessage() {}

func (x *SpanishVerbSubjunctiveInflections) ProtoReflect() protoreflect.Message {
	mi := &file_spanish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanishVerbSubjunctiveInflections.ProtoReflect.Descriptor instead.
func (*SpanishVerbSubjunctiveInflections) Descriptor() ([]byte, []int) {
	return file_spanish_proto_rawDescGZIP(), []int{2}
}

func (x *SpanishVerbSubjunctiveInflections) GetPresent() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Present
	}
	return nil
}

func (x *SpanishVerbSubjunctiveInflections) GetImperfectRa() *SpanishVerbPersonInflections {
	if x != nil {
		return x.ImperfectRa
	}
	return nil
}

func (x *SpanishVerbSubjunctiveInflections) GetImperfectSe() *SpanishVerbPersonInflections {
	if x != nil {
		return x.ImperfectSe
	}
	return nil
}

func (x *SpanishVerbSubjunctiveInflections) GetFuture() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Future
	}
	return nil
}

type SpanishVerbImperativeInflections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affirmative *SpanishVerbPersonInflections `protobuf:"bytes,1,opt,name=affirmative,proto3" json:"affirmative,omitempty"`
	Negative    *SpanishVerbPersonInflections `protobuf:"bytes,4,opt,name=negative,proto3" json:"negative,omitempty"`
}

func (x *SpanishVerbImperativeInflections) Reset() {
	*x = SpanishVerbImperativeInflections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spanish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanishVerbImperativeInflections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanishVerbImperativeInflections) ProtoMessage() {}

func (x *SpanishVerbImperativeInflections) ProtoReflect() protoreflect.Message {
	mi := &file_spanish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanishVerbImperativeInflections.ProtoReflect.Descriptor instead.
func (*SpanishVerbImperativeInflections) Descriptor() ([]byte, []int) {
	return file_spanish_proto_rawDescGZIP(), []int{3}
}

func (x *SpanishVerbImperativeInflections) GetAffirmative() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Affirmative
	}
	return nil
}

func (x *SpanishVerbImperativeInflections) GetNegative() *SpanishVerbPersonInflections {
	if x != nil {
		return x.Negative
	}
	return nil
}

type SpanishVerbPersonInflections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yo           string `protobuf:"bytes,1,opt,name=yo,proto3" json:"yo,omitempty"`
	Tu           string `protobuf:"bytes,2,opt,name=tu,proto3" json:"tu,omitempty"`
	Vos          string `protobuf:"bytes,3,opt,name=vos,proto3" json:"vos,omitempty"`
	ElloUsted    string `protobuf:"bytes,4,opt,name=ello_usted,json=elloUsted,proto3" json:"ello_usted,omitempty"`
	Nosotros     string `protobuf:"bytes,5,opt,name=nosotros,proto3" json:"nosotros,omitempty"`
	Vosotros     string `protobuf:"bytes,6,opt,name=vosotros,proto3" json:"vosotros,omitempty"`
	EllosUstedes string `protobuf:"bytes,7,opt,name=ellos_ustedes,json=ellosUstedes,proto3" json:"ellos_ustedes,omitempty"`
}

func (x *SpanishVerbPersonInflections) Reset() {
	*x = SpanishVerbPersonInflections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spanish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanishVerbPersonInflections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanishVerbPersonInflections) ProtoMessage() {}

func (x *SpanishVerbPersonInflections) ProtoReflect() protoreflect.Message {
	mi := &file_spanish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanishVerbPersonInflections.ProtoReflect.Descriptor instead.
func (*SpanishVerbPersonInflections) Descriptor() ([]byte, []int) {
	return file_spanish_proto_rawDescGZIP(), []int{4}
}

func (x *SpanishVerbPersonInflections) GetYo() string {
	if x != nil {
		return x.Yo
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetTu() string {
	if x != nil {
		return x.Tu
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetVos() string {
	if x != nil {
		return x.Vos
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetElloUsted() string {
	if x != nil {
		return x.ElloUsted
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetNosotros() string {
	if x != nil {
		return x.Nosotros
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetVosotros() string {
	if x != nil {
		return x.Vosotros
	}
	return ""
}

func (x *SpanishVerbPersonInflections) GetEllosUstedes() string {
	if x != nil {
		return x.EllosUstedes
	}
	return ""
}

var File_spanish_proto protoreflect.FileDescriptor

var file_spanish_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x32, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x22, 0xde, 0x03, 0x0a, 0x16, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x72, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x72, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x12,
	0x74, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68,
	0x56, 0x65, 0x72, 0x62, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x77, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x53, 0x75, 0x62, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x74,
	0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x20, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68,
	0x56, 0x65, 0x72, 0x62, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x63, 0x74, 0x12, 0x6e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69,
	0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x72, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,
	0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0xe3, 0x03, 0x0a, 0x21, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56,
	0x65, 0x72, 0x62, 0x53, 0x75, 0x62, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x12, 0x73, 0x0a, 0x0c, 0x69, 0x6d,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72,
	0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x12,
	0x68, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x20, 0x53, 0x70,
	0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72,
	0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68,
	0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x64, 0x72, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,
	0x68, 0x56, 0x65, 0x72, 0x62, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x22, 0xcc, 0x01, 0x0a, 0x1c, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x62,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x79,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x75, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c,
	0x6c, 0x6f, 0x73, 0x5f, 0x75, 0x73, 0x74, 0x65, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x55, 0x73, 0x74, 0x65, 0x64, 0x65, 0x73, 0x42,
	0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x67,
	0x6e, 0x69, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x61, 0x64, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spanish_proto_rawDescOnce sync.Once
	file_spanish_proto_rawDescData = file_spanish_proto_rawDesc
)

func file_spanish_proto_rawDescGZIP() []byte {
	file_spanish_proto_rawDescOnce.Do(func() {
		file_spanish_proto_rawDescData = protoimpl.X.CompressGZIP(file_spanish_proto_rawDescData)
	})
	return file_spanish_proto_rawDescData
}

var file_spanish_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_spanish_proto_goTypes = []interface{}{
	(*SpanishVerbInflections)(nil),            // 0: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbInflections
	(*SpanishVerbIndicativeInflections)(nil),  // 1: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections
	(*SpanishVerbSubjunctiveInflections)(nil), // 2: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections
	(*SpanishVerbImperativeInflections)(nil),  // 3: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbImperativeInflections
	(*SpanishVerbPersonInflections)(nil),      // 4: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
}
var file_spanish_proto_depIdxs = []int32{
	1,  // 0: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbInflections.indicative:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections
	2,  // 1: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbInflections.subjunctive:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections
	3,  // 2: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbInflections.imperative:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbImperativeInflections
	4,  // 3: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections.present:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 4: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections.imperfect:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 5: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections.preterite:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 6: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections.future:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 7: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbIndicativeInflections.conditional:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 8: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections.present:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 9: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections.imperfect_ra:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 10: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections.imperfect_se:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 11: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbSubjunctiveInflections.future:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 12: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbImperativeInflections.affirmative:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	4,  // 13: com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbImperativeInflections.negative:type_name -> com.madr.external_dictionaries.mongomodel.protobuf.SpanishVerbPersonInflections
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_spanish_proto_init() }
func file_spanish_proto_init() {
	if File_spanish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spanish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanishVerbInflections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spanish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanishVerbIndicativeInflections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spanish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanishVerbSubjunctiveInflections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spanish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanishVerbImperativeInflections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spanish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanishVerbPersonInflections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spanish_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spanish_proto_goTypes,
		DependencyIndexes: file_spanish_proto_depIdxs,
		MessageInfos:      file_spanish_proto_msgTypes,
	}.Build()
	File_spanish_proto = out.File
	file_spanish_proto_rawDesc = nil
	file_spanish_proto_goTypes = nil
	file_spanish_proto_depIdxs = nil
}
