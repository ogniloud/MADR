// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	storage "github.com/ogniloud/madr/pkg/flashcards/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteDeck provides a mock function with given fields: id
func (_m *Storage) DeleteDeck(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFlashcardFromDeck provides a mock function with given fields: id, cardId
func (_m *Storage) DeleteFlashcardFromDeck(id int, cardId int) error {
	ret := _m.Called(id, cardId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, cardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDecksByUserId provides a mock function with given fields: id
func (_m *Storage) GetDecksByUserId(id int) (storage.Decks, error) {
	ret := _m.Called(id)

	var r0 storage.Decks
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (storage.Decks, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) storage.Decks); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Decks)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlashcardsByDeckId provides a mock function with given fields: id
func (_m *Storage) GetFlashcardsByDeckId(id int) ([]storage.Flashcard, error) {
	ret := _m.Called(id)

	var r0 []storage.Flashcard
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]storage.Flashcard, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []storage.Flashcard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Flashcard)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAllFlashcards provides a mock function with given fields: id, cards
func (_m *Storage) PutAllFlashcards(id int, cards []storage.Flashcard) error {
	ret := _m.Called(id, cards)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []storage.Flashcard) error); ok {
		r0 = rf(id, cards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutFlashcard provides a mock function with given fields: id, card
func (_m *Storage) PutFlashcard(id int, card storage.Flashcard) error {
	ret := _m.Called(id, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, storage.Flashcard) error); ok {
		r0 = rf(id, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutNewDeck provides a mock function with given fields: config
func (_m *Storage) PutNewDeck(config storage.DeckConfig) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.DeckConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
